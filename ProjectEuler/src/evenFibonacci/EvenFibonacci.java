package evenFibonacci;

import java.util.ArrayList;

public class EvenFibonacci {

	public static void main(String[] args) {
		EvenFibonacci ef = new EvenFibonacci();
		System.out.println(ef.iterativeEvenSumFib(Integer.MAX_VALUE));
	}
	//	Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
	//	0, 1, [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...]

	//	By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
	
	// value does not exceed 4,000,000
	// Sum of the even value terms

//	public int fib(int n){
//
//		if (n == 0){
//			return 0;
//		}
//		else if(n == 1){
//			return 1;
//		}
//		else {
//			int val1 = fib(n-1);
//			int val2 = fib(n-2);
//			fibVals.add(val1 + val2);
//			
//			return  val1 + val2;
//		}
//	}
	
	public int iterativeEvenSumFib(int n){
		int sum = 0;
		
		int x = 0; 
		int y = 0;
		
		for(int i = 0; i < n; i++){
			if(i == 0){
				x = 0;
			}
			else if(i == 1){		
				y = 1;
			}
			else
			{			
				// set x to y and y to (x + y) need a temp to hold old y
				int temp = x;
				x = y;
				y = temp + y;
				
				if(y % 2 == 0 )
					sum += y;
				if(y > 4000000)
					return sum;				
			}
		}
		
		return sum;		
	}

}
